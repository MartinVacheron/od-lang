// Helpers
fn add(x, y) {
	return x + y
}

struct vec2 { 
	var x, y
	new(x, y)

	fn sum() { return self.x + self.y }
}

struct all_data {
	var pos

	new(pos)
}


var v = vec2(1, 2)



var a = []
var b = [1, 2, 3]
var c = [1, 2, 3, 4, 5, 6]
var pos = vec2(10, 8)
var data = all_data([1, 2, 3, 4, 5, 6])


test array_declaration {
	// Empty
	assert_eq(a, [])
	// Full
	assert_eq(b, [1, 2, 3])
	// With expressions
	assert_eq([0, add(1, 2), 5, pos.x], [0, 3, 5, 10])
}

test array_access {
	// Index
	assert_eq(b[1], 2)
	// Negative index
	assert_eq(b[-1], 3)
	// Slice
	assert_eq(c[2:], [3, 4, 5, 6])
	assert_eq(c[:3], [1, 2, 3, 4])
	assert_eq(c[1:3], [2, 3, 4])
	// Out of bound
	// assert_err(b[6])
	// assert_err(b[-8])
	// assert_err(a[2])
	// Member access
	// assert_eq(data.pos[-3:], [[4, 5, 6]]) 
}

test array_assignment {
	var copy = c
	copy[2] = 68

	// Index
	assert_eq(copy, [1, 2, 68, 4, 5, 6])
	// Can't do slice assignment
	// assert_err(a[:4] = 5)
}

test array_methods {
	var copy = a
	
	// Push
	copy.push(5)
	assert_eq(copy, [5])
}