struct Planet {
	var pos: vec2
	var mass: real
	var sat: []

	new(pos, mass, sat) {
		self.pos.x += 10

		var i: int = 5
		self.mass /= i
	}
}

struct Sat {
	var orbite: vec2
	new(orbite)

	fn get_time(factor: int) -> real {
		return 5 * factor
	}
}

struct vec2 {
	var x, y: real

	new(x: real, y: real)

	fn add(x: int, y: int) -> int {
		return self.x + y
	}

	fn div2() {
		var a = self.y + self.x * 10000
		echo(a)
		
		self.x /= 2.
		self.y /= 6.
	}
}

struct SolSystem {
	var planets: []
	var nb_obj: int
	var main_planet: Planet

	new(planets, nb_obj, main_planet)

	fn get_main() -> Planett {
		return self.main_planet
	}
}

var satelites: [] = [Sat(vec2(56, 89)), Sat(vec2(-5, 999)), Sat(vec2(-54765, 10345))]
var mars = Planet(vec2(1, 2), 50, satelites)
var sol_sys = SolSystem([mars], 4, mars)

fn get_sat() {
	return satelites
}


struct TestConstruct {
	var x, y: int
	var z: vec2

	new(x, y, z) {
		self.x += 20
		self.z.x -= 8
	}
}

var test_construct = TestConstruct(5, 10, vec2(68, 100))
echo(test_construct)